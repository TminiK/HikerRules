[
    {"title":"合集更新","type":"tool","icon":"https://git.tyrantg.com/tyrantgenesis/hikerViewRules/raw/master/assets/images/avatar.jpg","author":"TyrantGenesis","version":"1","group":"⑳TyrantG","titleColor":"","url":"hiker://empty","col_type":"","class_name":"","class_url":"","area_name":"","area_url":"","year_name":"","year_url":"","sort_name":"","sort_url":"","find_rule":"js:\nlet d = []\nd.push({\n    title: '导入',\n    col_type: 'text_center_1',\n    url: \"海阔视界规则分享，当前分享的是：小程序，TyrantGenesis￥home_rule_v2￥base64://@轻合集·TyrantG@\"\n})\nsetResult(d)","search_url":"","searchFind":"","detail_col_type":"","detail_find_rule":"","sdetail_col_type":"","sdetail_find_rule":"","ua":"","preRule":""},
    {"pageList":[],"title":"斗鱼直播","type":"live","author":"TyrantGenesis","version":5,"url":"https://m.douyu.com","col_type":"movie_2","class_name":"","class_url":"","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:\neval(fetch(\"hiker://files/rules/TyrantG/LIVE/douyu.js\"))\nbaseParse()","searchFind":"js:\neval(fetch(\"hiker://files/rules/TyrantG/LIVE/douyu.js\"))\nsearchParse()","search_url":"https://m.douyu.com/api/search/anchor?limit=10&offset=fypage@-1@*10@&sk=**;POST","group":"⑳TyrantG","detail_col_type":"movie_1","detail_find_rule":"","sdetail_col_type":"movie_1","sdetail_find_rule":"","ua":"pc","preRule":"const BASE_URL = \"https://git.tyrantg.com/tyrantgenesis/hikerViewRules/raw/master/\"\nconst LOCAL_URL = \"hiker://files/rules/TyrantG/\"\n\n/* Base Function */\nconst godWriteFile = (path) => {\n  if (Array.isArray(path))\n\tpath.forEach(item => writeFile(LOCAL_URL+item, fetch(BASE_URL+item)))\n  else\n\twriteFile(LOCAL_URL+path, fetch(BASE_URL+path))\n}\n\nconst godSaveFile = (path) => {\n  if (Array.isArray(path))\n\tpath.forEach(item => {\n\t  if (! fileExist(LOCAL_URL+item)) writeFile(LOCAL_URL+item, fetch(BASE_URL+item))\n\t})\n  else\n\tif (! fileExist(LOCAL_URL+path)) writeFile(LOCAL_URL+path, fetch(BASE_URL+path))\n  \n}\n/* Base Function */\n\ngodWriteFile([\"LIVE/douyu.js\", \"public/douyu-tabs.html\"])\ngodSaveFile([\"public/css/element-ui.css\", \"public/js/vue.min.js\", \"public/js/element-ui.js\"])","pages":"[]","icon":"https://git.tyrantg.com/tyrantgenesis/hikerViewRules/raw/master/assets/images/douyu.png","titleColor":"#bdb2ff"},
    {"title":"虎牙直播","type":"live","icon":"https://git.tyrantg.com/tyrantgenesis/hikerViewRules/raw/master/assets/images/huya.png","author":"TyrantGenesis","version":3,"url":"https://m.huya.com","col_type":"movie_3","class_name":"","class_url":"","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:\neval(fetch('hiker://files/TyrantG/LIVE/huya.js'))\nbaseParse()","searchFind":"js:\neval(fetch('hiker://files/TyrantG/LIVE/huya.js'))\nsearchParse()","search_url":"https://search.cdn.huya.com/?m=Search&do=getSearchContent&plt=m&q=**&uid=0&app=11&v=1&typ=-5&start=fypage@-1@*12@&rows=12","titleColor":"#bdb2ff","group":"⑳TyrantG","detail_col_type":"movie_1","detail_find_rule":"","sdetail_col_type":"movie_1","sdetail_find_rule":"","ua":"mobile","preRule":"eval(fetch(\"https://git.tyrantg.com/tyrantgenesis/hikerViewRules/raw/master/God_Plan.js\"))\nhuya_live()"},
    
    {"title":"企鹅电竞","type":"live","icon":"https://git.tyrantg.com/tyrantgenesis/hikerViewRules/raw/master/assets/images/qie_e.png","author":"TyrantGenesis","version":1,"group":"⑳TyrantG","titleColor":"#bdb2ff","url":"https://share.egame.qq.com/cgi-bin/pgg_async_fcgi?param={\"0\":{\"param\":{\"page_num\":fypage,\"page_size\":16},\"module\":\"pgg_live_read_ifc_mt_svr\",\"method\":\"get_live_list_by_recom_h5\"}};POST","col_type":"","class_name":"","class_url":"","area_name":"","area_url":"","year_name":"","year_url":"","sort_name":"","sort_url":"","find_rule":"js:\neval(fetch('hiker://files/TyrantG/LIVE/qie_egame.js'))\nbaseParse()","search_url":"https://egame.qq.com/search/live?kw=**;get;utf-8;{User-Agent@Windows}","searchFind":"js:\neval(fetch('hiker://files/TyrantG/LIVE/qie_egame.js'))\nsearchParse()","detail_col_type":"","detail_find_rule":"","sdetail_col_type":"","sdetail_find_rule":"","ua":"","preRule":"eval(fetch(\"https://git.tyrantg.com/tyrantgenesis/hikerViewRules/raw/master/God_Plan.js\"))\nqie_egame_live()"},
    {"title":"Twitch","type":"live","icon":"https://git.tyrantg.com/tyrantgenesis/hikerViewRules/raw/master/assets/images/twitch.png","author":"TyrantGenesis","version":3,"url":"https://api.twitch.tv/kraken/games/top?offset=fypage@-1@*24@&limit=24","col_type":"","class_name":"","class_url":"","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:\neval(fetch(\"hiker://files/TyrantG/LIVE/twitch.js\"))\nbaseParse()","searchFind":"js:\neval(fetch(\"hiker://files/TyrantG/LIVE/twitch.js\"))\nsecParse()","search_url":"https://api.twitch.tv/kraken/search/streams?query=**&offset=fypage@-1@*24@&limit=24","titleColor":"#bdb2ff","group":"⑳TyrantG","detail_col_type":"movie_2","detail_find_rule":"js:\neval(fetch(\"hiker://files/TyrantG/LIVE/twitch.js\"))\nsecParse()","sdetail_col_type":"","sdetail_find_rule":"","ua":"pc","preRule":"eval(fetch(\"https://git.tyrantg.com/tyrantgenesis/hikerViewRules/raw/master/God_Plan.js\"))\ntwitch()"},
    {"title":"YouTube","type":"video","icon":"https://git.tyrantg.com/tyrantgenesis/hikerViewRules/raw/master/assets/images/youtube.png","author":"TyrantGenesis","version":2,"url":"hiker://empty","col_type":"movie_3","class_name":"","class_url":"","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:\neval(fetch('hiker://files/TyrantG/TEST/youtube.js'))\nbaseParse()","searchFind":"","search_url":"","titleColor":"#bdb2ff","group":"⑳TyrantG","detail_col_type":"movie_1","detail_find_rule":"","sdetail_col_type":"movie_1","sdetail_find_rule":"","ua":"mobile","preRule":"eval(fetch(\"https://git.tyrantg.com/tyrantgenesis/hikerViewRules/raw/master/God_Plan.js\"))\nyoutube()"},

    {"title":"4K影视","type":"video","icon":"https://git.tyrantg.com/tyrantgenesis/hikerViewRules/raw/master/assets/images/4k.png","author":"TyrantGenesis","version":2,"url":"https://www.4kvm.com/fyclass/page/fypage####fyclass","col_type":"movie_3","class_name":"电影&美剧&国产剧&韩剧&番剧&热门播放&评分榜","class_url":"movies&classify/美剧&classify/国产剧&classify/韩剧&classify/番剧&trending&ratings","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:\n    let d = [];\n    const cate = MY_URL.split('####')[1]\n\n    const temp1 = _ => {\n        let list = parseDomForArray(getResCode(), '#archive-content&&.item')\n        list.forEach(item => {\n            d.push({\n                title: parseDomForHtml(item, 'h3&&Text'),\n                pic_url: parseDomForHtml(item, 'img&&src'),\n                url: parseDomForHtml(item, 'a&&href')+'#immersiveTheme#',\n                desc: parseDomForHtml(item, '.rating&&Text'),\n            })\n        })\n    }\n\n    const temp2 = _ => {\n        let list = parseDomForArray(getResCode(), '.items&&.item')\n        list.forEach(item => {\n            d.push({\n                title: parseDomForHtml(item, 'h3&&Text'),\n                pic_url: parseDomForHtml(item, 'img&&src'),\n                url: parseDomForHtml(item, 'a&&href')+'#immersiveTheme#',\n                desc: parseDomForHtml(item, '.rating&&Text'),\n            })\n        })\n    }\n\n    switch (cate) {\n        case 'movies':\n            temp1()\n            break\n        default:\n            temp2()\n    }\n\n    setResult(d);","searchFind":".search-page&&.result-item;\n.title&&Text;\na&&href.js:input+\"#immersiveTheme#\";\n.contenido&&Text;\n.contenido&&Text;\nimg&&src","search_url":"https://www.4kvm.com/xssearch?s=**&f=_all&p=fypage","titleColor":"#bdb2ff","group":"⑳TyrantG","detail_col_type":"movie_1_vertical_pic_blur","detail_find_rule":"js:\n    let d = [];\n    let header = parseDomForHtml(getResCode(), '.sheader&&Html')\n\n    d.push({\n        title: parseDomForHtml(header, 'h1&&Text'),\n        pic_url: parseDomForHtml(header, 'img&&src'),\n        url: MY_URL,\n        desc: parseDomForHtml(getResCode(), '.wp-content&&p&&Text'),\n    })\n    d.push({\n        col_type: 'line'\n    })\n\n    let list = parseDomForArray(getResCode(), '#episodes&&.se-c')\n\n    d.push({\n        title: '选集',\n        url: \"hiker://empty\",\n        col_type: 'text_1',\n    })\n    if (list.length > 0) {\n        list.forEach(item => {\n            d.push({\n                title: parseDomForHtml(item, '.title&&Text'),\n                url: \"hiker://empty\",\n                col_type: 'text_1',\n            })\n            let current_list = parseDomForArray(item, 'ul&&li')\n            if (current_list.length > 0) {\n                current_list.reverse().forEach(data => {\n                    d.push({\n                        title: parseDomForHtml(data, 'a&&Text').replace(' ', ''),\n                        url: $(parseDomForHtml(data, 'a&&href')).lazyRule(_ => {\n                            let video = parseDomForArray(request(input), '#playeroptionsul&&li')[0]\n                            let fetch = request(\"https://www.4kvm.com/wp-json/dooplayer/v1/post/\"+parseDomForHtml(video, 'li&&data-post')+\"?type=movie&source=1\")\n                            return \"http://4kjx.dev.tyrantg.com/index.m3u8?url=\"+JSON.parse(fetch).embed_url+'#isVideo=true#'\n                        }),\n                        col_type: 'text_4',\n                    })\n                })\n            } else {\n                let html = request(parseDomForHtml(item, 'a&&href'))\n                let sel_list_json = html.match(/videourls:\\[(.*?)],/)[1]\n                let sel_list = JSON.parse(sel_list_json)\n                sel_list.forEach(data => {\n                    d.push({\n                        title: \"第\"+data.name+\"集\",\n                        url: \"http://4kjx.dev.tyrantg.com/index.m3u8?url=\"+data.url+'#isVideo=true#',\n                        col_type: 'text_4',\n                    })\n                })\n            }\n        })\n    } else {\n        let video = parseDomForArray(getResCode(), '#playeroptionsul&&li')\n        video.forEach(item => {\n            d.push({\n                //title: parseDomForHtml(item, '.title&&Text'),\n                title: '在线播放',\n                url: $(\"https://www.4kvm.com/wp-json/dooplayer/v1/post/\"+parseDomForHtml(item, 'li&&data-post')+\"?type=movie&source=1\").lazyRule(_ => {\n                    let fetch = request(input)\n                    return \"http://4kjx.dev.tyrantg.com/index.m3u8?url=\"+JSON.parse(fetch).embed_url+'#isVideo=true#'\n                }),\n                col_type: 'text_2',\n            })\n        })\n\n    }\n\n    setResult(d);","sdetail_col_type":"movie_1","sdetail_find_rule":"*","ua":"pc","preRule":"","pages":"[]"},
    {"title":"站酷","type":"picture","icon":"https://git.tyrantg.com/tyrantgenesis/hikerViewRules/raw/master/assets/images/zcool.jpg","author":"TyrantGenesis","version":"1","group":"⑳TyrantG","titleColor":"#bdb2ff","url":"https://www.zcool.com.cn/discover.json##fypage","col_type":"","class_name":"","class_url":"","area_name":"","area_url":"","year_name":"","year_url":"","sort_name":"","sort_url":"","find_rule":"js:\neval(fetch('hiker://files/TyrantG/IMAGE/zcool.js'))\nbaseParse()","search_url":"https://www.zcool.com.cn/search/content.json?word=**&cate=0&type=0&recommendLevel=0&time=0&hasVideo=0&city=0&college=0&sort=5&limit=20&column=4&page=fypage","searchFind":"js:\neval(fetch('hiker://files/TyrantG/IMAGE/zcool.js'))\nsearchParse()","detail_col_type":"","detail_find_rule":"","sdetail_col_type":"","sdetail_find_rule":"","ua":"pc","preRule":"eval(fetch(\"https://git.tyrantg.com/tyrantgenesis/hikerViewRules/raw/master/God_Plan.js\"))\nzcool()"},
    {"title":"稀土掘金","type":"news","icon":"https://git.tyrantg.com/tyrantgenesis/hikerViewRules/raw/master/assets/images/juejin.png","author":"TyrantGenesis","url":"hiker://empty##fypage","version":1,"col_type":"movie_3","class_name":"","class_url":"","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:\naddListener(\"onClose\", $.toString(() => {\n    clearItem('cate_level_1_id')\n    clearItem('cate_level_2_id')\n    clearItem('cursor')\n}))\nconst d = []\nconst EMPTY = 'hiker://empty'\nconst CATE_URL              = 'https://juejin.cn'\nconst SEC_CARE_API          = 'https://api.juejin.cn/recommend_api/v1/tag/recommend_tag_list'\nconst CONTENT_LIST_API      = 'https://api.juejin.cn/recommend_api/v1/article/recommend_cate_tag_feed'\nconst CURRENT_PAGE          = MY_URL.split('##')[1].toString()\nconst CATE_LEVEL_1_ID       = getItem('cate_level_1_id', '')\nconst CATE_LEVEL_2_ID       = getItem('cate_level_2_id', '')\n\nconst CATE_LEVEL_1_ARRAY    = pdfa(fetch(CATE_URL, {headers: {\"User-Agent\": PC_UA}}), '.view-nav&&a')\n\nif (CURRENT_PAGE === '1') {\n    clearItem('cursor')\n    CATE_LEVEL_1_ARRAY.forEach(item => {\n        let id = pdfh(item, '.category-popover-box&&st:state') || ''\n        let title = pdfh(item, '.category-popover-box&&Text')\n        let url = pdfh(item, 'a&&href')\n\n        d.push({\n            title: id === CATE_LEVEL_1_ID ? '‘‘’’<strong><font color=\"red\">'+title+'</font></strong>' : title,\n            url: $(EMPTY).lazyRule(params => {\n                setItem('cursor', '0')\n                setItem('cate_level_1_id', params.id)\n                setItem('cate_level_2_id', '')\n                refreshPage(true)\n                return 'hiker://empty'\n            }, {\n                id: id\n            }),\n            col_type: 'scroll_button'\n        })\n    })\n    d.push({\n        col_type: \"blank_block\"\n    })\n\n    if (CATE_LEVEL_1_ID) {\n        d.push({\n            title: CATE_LEVEL_2_ID === '' ? '‘‘’’<strong><font color=\"red\">全部</font></strong>' : '全部',\n            url: $(EMPTY).lazyRule(_ => {\n                setItem('cate_level_2_id', '')\n                refreshPage(true)\n                return 'hiker://empty'\n            }),\n            col_type: 'scroll_button'\n        })\n        let data = {\"cate_id\": CATE_LEVEL_1_ID}\n\n        let headers = {\n            \"User-Agent\": PC_UA,\n            \"Content-Type\": 'application/json',\n            \"Referer\": 'https://juejin.cn/',\n        }\n        const CATE_LEVEL_2_JSON = fetch(SEC_CARE_API, {headers: headers, method:'POST', body: JSON.stringify(data)})\n        const CATE_LEVEL_2_RESULT = JSON.parse(CATE_LEVEL_2_JSON)\n\n        if (CATE_LEVEL_2_RESULT && CATE_LEVEL_2_RESULT.err_no === 0) {\n            const CATE_LEVEL_2_ARRAY = CATE_LEVEL_2_RESULT.data\n            CATE_LEVEL_2_ARRAY.forEach(item => {\n                d.push({\n                    title: CATE_LEVEL_2_ID === item.tag_id.toString() ? '‘‘’’<strong><font color=\"'+item.color+'\">'+item.tag_name+'</font></strong>' : item.tag_name,\n                    url: $(EMPTY).lazyRule(params => {\n                        setItem('cursor', '0')\n                        setItem('cate_level_2_id', params.id)\n                        refreshPage(true)\n                        return 'hiker://empty'\n                    }, {\n                        id: item.tag_id\n                    }),\n                    col_type: 'scroll_button'\n                })\n            })\n            d.push({\n                col_type: \"blank_block\"\n            })\n        }\n    }\n}\n\nconst CURSOR = getItem('cursor', '0')\ndata = {\n    cate_id: \"6809637769959178254\",\n    cursor: CURSOR,\n    id_type: 2,\n    limit: 20,\n    sort_type: 200,\n}\nif (CATE_LEVEL_1_ID) data.cate_id = CATE_LEVEL_1_ID\nif (CATE_LEVEL_2_ID) data.tag_id = CATE_LEVEL_2_ID\n\nheaders = {\n    \"User-Agent\": PC_UA,\n    \"Content-Type\": 'application/json',\n    \"Referer\": 'https://juejin.cn/',\n}\nconst LIST_JSON = fetch(CONTENT_LIST_API, {headers: headers, method:'POST', body: JSON.stringify(data)})\nconst LIST_RESULT = JSON.parse(LIST_JSON)\n\nif (LIST_RESULT && LIST_RESULT.err_no === 0) {\n    setItem('cursor', LIST_RESULT.cursor)\n    log('Data')\n    log(getItem('cursor', '0'))\n    const LIST = LIST_RESULT.data\n    LIST.forEach(item => {\n        d.push({\n            title: item.article_info.title,\n            desc: item.article_info.brief_content,\n            pic_url: item.article_info.cover_image,\n            url: $(CATE_URL+'/post/'+item.article_id).rule(_ => {\n                const d = []\n\n                d.push({\n                    desc: '100% && float',\n                    url: MY_URL,\n                    col_type:\"x5_webview_single\"\n                })\n\n                setResult(d)\n            }),\n            col_type: 'movie_1'\n        })\n    })\n}\n\nsetResult(d)\n","search_url":"","group":"⑳TyrantG","searchFind":"","detail_col_type":"movie_1","detail_find_rule":"","sdetail_col_type":"movie_1","sdetail_find_rule":"","ua":"mobile","preRule":"","pages":"[]"},
    {"title":"触站","icon":"https://git.tyrantg.com/tyrantgenesis/hikerViewRules/raw/master/assets/images/chuzhan.png","author":"TyrantGenesis","url":"hiker://empty##fypage","version":1,"col_type":"movie_3","class_name":"","type":"picture","class_url":"","area_name":"","area_url":"","sort_name":"","year_name":"","sort_url":"","year_url":"","find_rule":"js:\neval(fetch('hiker://files/TyrantG/IMAGE/huashi6.js'))\nbaseParse()","search_url":"https://rt.huashi6.com/front/works/search?index=fypage&title=**","group":"⑩TyrantG","searchFind":"js:\neval(fetch('hiker://files/TyrantG/IMAGE/huashi6.js'))\nsearchParse()","detail_col_type":"movie_1","detail_find_rule":"js:\neval(fetch('hiker://files/TyrantG/IMAGE/huashi6.js'))\nsecParse()","sdetail_col_type":"movie_1","sdetail_find_rule":"js:\neval(fetch('hiker://files/TyrantG/IMAGE/huashi6.js'))\nsecParse()","ua":"pc","preRule":"eval(fetch(\"https://git.tyrantg.com/tyrantgenesis/hikerViewRules/raw/master/God_Plan.js\"))\nhuashi6()","pages":"[]"}
]